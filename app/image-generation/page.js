"use client";

import { useState } from "react";

export default function ImageGeneration() {
  const [prompt, setPrompt] = useState("");
  const [size, setSize] = useState("1024x1024");
  const [outputFormat, setOutputFormat] = useState("jpeg");
  const [imageUrl, setImageUrl] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setImageUrl(null);
    try {
      const response = await fetch("/api/openai/image-generation", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt, size, outputFormat }),
      });
      const result = await response.json();
      if (result.success) {
        setImageUrl(result.data.imageUrl);
      } else {
        setError(result.error || "Unknown error");
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-cyan-400 p-4 flex flex-col items-center">
      <h1 className="text-3xl font-bold mb-6 text-cyan-300">
        GPT Image Generation
      </h1>
      <form
        onSubmit={handleSubmit}
        className="bg-gray-800 rounded-lg p-6 shadow-lg border border-cyan-700 w-full max-w-lg space-y-4"
      >
        <div>
          <label className="block text-sm font-medium mb-1">Prompt</label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe the image you want to generate..."
            className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 h-24 focus:ring-cyan-500 focus:border-cyan-500"
            required
          />
        </div>
        <div className="flex space-x-4">
          <div className="flex-1">
            <label className="block text-sm font-medium mb-1">Size</label>
            <select
              value={size}
              onChange={(e) => setSize(e.target.value)}
              className="w-full bg-gray-700 border border-gray-600 rounded-md p-2"
            >
              <option value="256x256">256x256</option>
              <option value="512x512">512x512</option>
              <option value="1024x1024">1024x1024</option>
            </select>
          </div>
          <div className="flex-1">
            <label className="block text-sm font-medium mb-1">Format</label>
            <select
              value={outputFormat}
              onChange={(e) => setOutputFormat(e.target.value)}
              className="w-full bg-gray-700 border border-gray-600 rounded-md p-2"
            >
              <option value="jpeg">JPEG</option>
              <option value="png">PNG</option>
              <option value="webp">WEBP</option>
            </select>
          </div>
        </div>
        <button
          type="submit"
          disabled={loading}
          className="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded-md transition duration-200 disabled:opacity-50"
        >
          {loading ? "Generating..." : "Generate Image"}
        </button>
      </form>
      <div className="mt-8 w-full max-w-lg flex flex-col items-center">
        {error && <div className="text-red-400 mb-4">{error}</div>}
        {imageUrl && (
          <img
            src={imageUrl}
            alt="Generated by GPT Image"
            className="rounded-lg border border-cyan-700 shadow-lg max-w-full max-h-[500px]"
          />
        )}
      </div>
    </div>
  );
}
